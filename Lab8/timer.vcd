$date
	Thu Mar 12 19:49:46 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module timer_test $end
$var wire 32 ! cycle [31:0] $end
$var wire 1 " TimerInterrupt $end
$var wire 1 # TimerAddress $end
$var reg 1 $ MemRead $end
$var reg 1 % MemWrite $end
$var reg 32 & address [31:0] $end
$var reg 1 ' clock $end
$var reg 32 ( data [31:0] $end
$var reg 1 ) reset $end
$scope module t $end
$var wire 1 $ MemRead $end
$var wire 1 % MemWrite $end
$var wire 32 * NUMBER_CYCLES [31:0] $end
$var wire 32 + TIME_INTERRUPT [31:0] $end
$var wire 1 # TimerAddress $end
$var wire 1 , TimerRead $end
$var wire 1 - TimerWrite $end
$var wire 1 . acknowledge $end
$var wire 32 / address [31:0] $end
$var wire 1 ' clock $end
$var wire 32 0 data [31:0] $end
$var wire 1 ) reset $end
$var wire 1 1 reset_interrupt $end
$var wire 1 2 store_time $end
$var wire 1 3 get_time $end
$var wire 32 4 cycle [31:0] $end
$var wire 1 5 check_equal $end
$var wire 1 " TimerInterrupt $end
$var wire 32 6 Q_interrupt_cycle [31:0] $end
$var wire 32 7 Q_cycle_counter [31:0] $end
$var wire 32 8 ALU_out [31:0] $end
$scope module alu $end
$var wire 3 9 control [2:0] $end
$var wire 32 : inB [31:0] $end
$var wire 32 ; out [31:0] $end
$var wire 1 < zero $end
$var wire 1 = negative $end
$var wire 32 > inA [31:0] $end
$upscope $end
$scope module cycle_counter $end
$var wire 1 ' clk $end
$var wire 32 ? d [31:0] $end
$var wire 1 @ enable $end
$var wire 1 ) reset $end
$var reg 32 A q [31:0] $end
$upscope $end
$scope module dff1 $end
$var wire 1 ' clk $end
$var wire 1 B d $end
$var wire 1 5 enable $end
$var wire 1 1 reset $end
$var reg 1 " q $end
$upscope $end
$scope module interrupt_cycle $end
$var wire 1 ' clk $end
$var wire 32 C d [31:0] $end
$var wire 1 - enable $end
$var wire 1 ) reset $end
$var reg 32 D q [31:0] $end
$upscope $end
$scope module tr1 $end
$var wire 1 , control $end
$var wire 32 E d [31:0] $end
$var wire 32 F o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bz F
bx E
bx D
b0 C
1B
bx A
1@
bx ?
bx >
x=
x<
bx ;
b1 :
b0 9
bx 8
bx 7
bx 6
x5
bz 4
03
02
11
b0 0
b0 /
0.
0-
0,
b11111111111111110000000001101100 +
b11111111111111110000000000011100 *
1)
b0 (
0'
b0 &
0%
0$
0#
x"
bz !
$end
#5
0=
0<
b1 8
b1 ;
b1 ?
05
b0 7
b0 >
b0 A
b0 E
b11111111111111111111111111111111 6
b11111111111111111111111111111111 D
0"
1'
#10
b0 !
b0 4
b0 F
1#
1,
01
0'
1$
13
b11111111111111110000000000011100 &
b11111111111111110000000000011100 /
0)
#15
b10 8
b10 ;
b10 ?
b1 !
b1 4
b1 F
b1 7
b1 >
b1 A
b1 E
1'
#20
0'
#25
b11 8
b11 ;
b11 ?
b10 !
b10 4
b10 F
b10 7
b10 >
b10 A
b10 E
1'
#30
0'
#35
b100 8
b100 ;
b100 ?
b11 !
b11 4
b11 F
b11 7
b11 >
b11 A
b11 E
1'
#40
0'
#45
b101 8
b101 ;
b101 ?
b100 !
b100 4
b100 F
b100 7
b100 >
b100 A
b100 E
1'
#50
bz !
bz 4
bz F
1-
0,
0'
1%
0$
b110 (
b110 0
b110 C
#55
b110 8
b110 ;
b110 ?
b110 6
b110 D
b101 7
b101 >
b101 A
b101 E
1'
#60
b101 !
b101 4
b101 F
0-
1,
0'
0%
1$
#65
b111 8
b111 ;
b111 ?
b110 !
b110 4
b110 F
15
b110 7
b110 >
b110 A
b110 E
1'
#70
0'
#75
b1000 8
b1000 ;
b1000 ?
b111 !
b111 4
b111 F
1"
05
b111 7
b111 >
b111 A
b111 E
1'
#80
0'
#85
b1001 8
b1001 ;
b1001 ?
b1000 !
b1000 4
b1000 F
b1000 7
b1000 >
b1000 A
b1000 E
1'
#90
0'
#95
b1010 8
b1010 ;
b1010 ?
b1001 !
b1001 4
b1001 F
b1001 7
b1001 >
b1001 A
b1001 E
1'
#100
bz !
bz 4
bz F
11
0,
1.
0'
1%
0$
03
12
b11111111111111110000000001101100 &
b11111111111111110000000001101100 /
#105
b1011 8
b1011 ;
b1011 ?
b1010 7
b1010 >
b1010 A
b1010 E
0"
1'
#110
0'
